{"version":3,"file":"static/js/429.97e7bac2.chunk.js","mappings":"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","sources":["components/error/Error.jsx","components/pages/SinglePage.jsx","services/MarvelService.js"],"sourcesContent":["import gif from \"../../resources/error.gif\";\r\nimport \"./error.scss\";\r\n\r\nconst Error = () => {\r\n    return <img className='error__img' src={gif} alt='Error' />;\r\n};\r\n\r\nexport default Error;\r\n","import \"./singleComicPage.scss\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Preloader from \"../preloader/Preloader\";\r\nimport Error from \"../error/Error\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst SinglePage = ({ type }) => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const {\r\n        loader,\r\n        error,\r\n        getComicsByIdData,\r\n        getCharacterByIdData,\r\n        clearError,\r\n    } = useMarvelService();\r\n\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        clearError();\r\n        switch (type) {\r\n            case \"comics\":\r\n                getComicsByIdData(id).then((comic) => onDataLoaded(comic));\r\n                break;\r\n            case \"char\":\r\n                getCharacterByIdData(id).then((char) => onDataLoaded(char));\r\n                break;\r\n        }\r\n    }, [id]);\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData((prevS) => data);\r\n    };\r\n\r\n    const err = error && <Error />;\r\n    const preloader = loader && <Preloader />;\r\n    const helmetSEO = data ? (\r\n        <Helmet>\r\n            <meta charSet='utf-8' name='descrition' />\r\n            <title>{data.title} Info</title>\r\n        </Helmet>\r\n    ) : (\r\n        <Helmet>\r\n            <meta charSet='utf-8' name='descrition' />\r\n            <title>Single {type} Info</title>\r\n        </Helmet>\r\n    );\r\n    return (\r\n        <>\r\n            {helmetSEO}\r\n            {err}\r\n            {preloader}\r\n            {!loader && !error && data && (\r\n                <div className='single'>\r\n                    <>\r\n                        <img\r\n                            src={data.thumbnail}\r\n                            alt={data.title}\r\n                            className='single__img'\r\n                        />\r\n                        <div className='single__info'>\r\n                            <h2 className='single__name'>{data.title}</h2>\r\n                            <p className='single__descr'>{data.description}</p>\r\n\r\n                            {!loader && !error && data && type === \"comics\" && (\r\n                                <>\r\n                                    <p className='single__descr'>\r\n                                        {data.pages}\r\n                                    </p>\r\n                                    <p className='single__descr'>\r\n                                        Language: en-us\r\n                                    </p>\r\n                                    <div className='single__price'>\r\n                                        {data.price}\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                        <Link\r\n                            onClick={() => navigate(-1)}\r\n                            to=''\r\n                            className='single__back'>\r\n                            Back to all\r\n                        </Link>\r\n                    </>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loader, error, request, clearError } = useHttp();\r\n\r\n    const _Apikey = \"apikey=75aef817f3e41428518bd4e3781b08d1\";\r\n    const _Apibase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _baseOffset = 660;\r\n\r\n    // Characters\r\n\r\n    const getAllChars = async (name) => {\r\n        const response = await request(\r\n            `${_Apibase}characters?name=${name}&${_Apikey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformChar);\r\n    };\r\n\r\n    const getAllCharactersData = async (offset = _baseOffset) => {\r\n        const response = await request(\r\n            `${_Apibase}characters?limit=9&offset=${offset}&${_Apikey}`\r\n        );\r\n        return response.data.results.map(_transformChar);\r\n    };\r\n\r\n    const getCharacterByIdData = async (id) => {\r\n        const response = await request(\r\n            `${_Apibase}characters/${id}?${_Apikey}`\r\n        );\r\n        return _transformChar(response.data.results[0]);\r\n    };\r\n\r\n    const getRandomCharacter = async () => {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n        const response = await request(\r\n            `${_Apibase}characters/${id}?${_Apikey}`\r\n        );\r\n        return _transformChar(response.data.results[0]);\r\n    };\r\n\r\n    // Comicses\r\n    const getAllComicsData = (offset = 200) => {\r\n        return request(`${_Apibase}comics?limit=8&offset=${offset}&${_Apikey}`);\r\n    };\r\n    const getComicsByIdData = async (id) => {\r\n        const response = await request(`${_Apibase}comics/${id}?${_Apikey}`);\r\n        return _transformComics(response.data.results[0]);\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            description: _transformText(comics.description),\r\n            id: comics.id,\r\n            thumbnail: `${comics.images[0].path}.${comics.images[0].extension}`,\r\n            price: `${comics.prices[0].price}$`,\r\n            pages: `${comics.pageCount}pages`,\r\n        };\r\n    };\r\n\r\n    const _transformChar = (data) => {\r\n        const comics = data.comics.items.map((el) => el.name);\r\n\r\n        return {\r\n            description: _transformText(data.description),\r\n            id: data.id,\r\n            title: data.name,\r\n            thumbnail: `${data.thumbnail.path}.${data.thumbnail.extension}`,\r\n            homepage: data.urls[0].url,\r\n            wiki: data.urls[1].url,\r\n            comics,\r\n        };\r\n    };\r\n\r\n    const _transformText = (text) => {\r\n        return !text\r\n            ? \"Sorry...We don't have description for this one...\"\r\n            : `${text.slice(0, 230)}...`;\r\n    };\r\n\r\n    return {\r\n        getAllChars,\r\n        getRandomCharacter,\r\n        getAllCharactersData,\r\n        getCharacterByIdData,\r\n        getAllComicsData,\r\n        getComicsByIdData,\r\n        clearError,\r\n        loader,\r\n        error,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["className","src","gif","alt","type","id","useParams","navigate","useNavigate","useMarvelService","loader","error","getComicsByIdData","getCharacterByIdData","clearError","useState","data","setData","useEffect","then","comic","onDataLoaded","char","prevS","err","Error","preloader","Preloader","helmetSEO","Helmet","charSet","name","title","thumbnail","description","pages","price","onClick","to","useHttp","request","_Apikey","_Apibase","getAllChars","response","results","map","_transformChar","getAllCharactersData","offset","getRandomCharacter","Math","floor","random","_transformComics","comics","_transformText","images","path","extension","prices","pageCount","items","el","homepage","urls","url","wiki","text","slice","getAllComicsData"],"sourceRoot":""}