{"version":3,"file":"static/js/232.34fb298a.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.jsx","components/error/Error.jsx","components/charList/CharList.jsx","components/charInfo/charBasics/CharBasics.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/randomChar/RandomChar.jsx","components/form/MyForm.jsx","components/pages/MainPage.jsx","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport Error from \"../error/Error\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null,\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState((state) => ({ error, errorInfo }));\r\n    }\r\n\r\n    render() {\r\n        const { error, errorInfo } = this.state;\r\n        const { children } = this.props;\r\n\r\n        if (errorInfo) {\r\n            return <Error />;\r\n        }\r\n\r\n        return children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import gif from \"../../resources/error.gif\";\r\nimport \"./error.scss\";\r\n\r\nconst Error = () => {\r\n    return <img className='error__img' src={gif} alt='Error' />;\r\n};\r\n\r\nexport default Error;\r\n","import \"./charList.scss\";\r\nimport { flushSync } from \"react-dom\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useEffect, useState, memo } from \"react\";\r\nimport Preloader from \"../preloader/Preloader\";\r\nimport Error from \"../error/Error\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useUpdateList } from \"../../hooks/http.hook\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\n\r\nconst CharList = ({ selectedCharId, updateSelectedChar }) => {\r\n    const { loader, error, getAllCharactersData } = useMarvelService();\r\n    const { charList, search, setCharList, updateCharList, clearCharList } =\r\n        useUpdateList();\r\n\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [btndisabled, setBtndisabled] = useState(true);\r\n    const [total, setTotal] = useState(1559);\r\n    const [offset, setOffset] = useState(\r\n        +window.localStorage.getItem(\"offset\") || 660\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!window.localStorage.getItem(\"offset\")) {\r\n            window.localStorage.setItem(\"offset\", offset);\r\n        }\r\n        getAllCharacters(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (+window.localStorage.getItem(\"offset\") >= 1549) {\r\n            window.localStorage.setItem(\"offset\", total - 1);\r\n            return;\r\n        }\r\n        window.localStorage.setItem(\"offset\", offset - 9);\r\n    }, [offset]);\r\n\r\n    const getAllCharacters = (initial = false) => {\r\n        initial ? setNewItemLoading(true) : setNewItemLoading(false);\r\n        getAllCharactersData(offset)\r\n            .then((charListData) => updateCharList(charListData))\r\n            .then(() => finallyUpdate());\r\n    };\r\n\r\n    const finallyUpdate = () => {\r\n        updateOffset();\r\n        setBtndisabled(false);\r\n    };\r\n\r\n    const updateOffset = () => {\r\n        if (offset >= total) {\r\n            return;\r\n        }\r\n        if (total - offset < 9) {\r\n            const difference = offset + (total - offset);\r\n            setOffset(difference);\r\n            return;\r\n        }\r\n        setOffset(offset + 9);\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (offset === total) { return;}\r\n    //     window.addEventListener('scroll', handlerOnScroll);\r\n    //     return () => { window.removeEventListener('scroll', handlerOnScroll);} }, [offset])\r\n\r\n    // const handlerOnScroll = () => {\r\n    //     if (document.documentElement.scrollTop === document.documentElement.scrollHeight - document.documentElement.clientHeight && document.documentElement.scrollTop !== 0) {\r\n    //         getAllCharacters();}}\r\n\r\n    const getCharId = (id) => {\r\n        updateSelectedChar(id);\r\n    };\r\n\r\n    const chooseElemFromKeys = (e) => {\r\n        if (e.key === \"Enter\" || e.key === \" \") {\r\n            e.preventDefault();\r\n            const el = e.target;\r\n            const charList = document.querySelectorAll(\".char__item\");\r\n            const selectedElemId = +el.getAttribute(\"id\");\r\n\r\n            charList.forEach((item) => {\r\n                item.classList.remove(\"active\");\r\n            });\r\n\r\n            el.classList.add(\"active\");\r\n            getCharId(selectedElemId);\r\n            el.blur();\r\n        }\r\n    };\r\n\r\n    const getMoreChars = (offset) => {\r\n        flushSync(() => updateOffset());\r\n        setBtndisabled(!btndisabled);\r\n        getAllCharacters(offset);\r\n    };\r\n\r\n    const duration = 700;\r\n\r\n    const chars = (\r\n        <TransitionGroup className='char__grid'>\r\n            {charList.map((el) => {\r\n                const imageStyle =\r\n                    el.thumbnail ===\r\n                    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n                        ? { objectFit: \"fill\" }\r\n                        : { objectFit: \"cover\" };\r\n                const itemClazz =\r\n                    selectedCharId === el.id\r\n                        ? \"char__item \" + \"active\"\r\n                        : \"char__item\";\r\n\r\n                return (\r\n                    <CSSTransition\r\n                        key={el.id}\r\n                        timeout={duration}\r\n                        classNames='my-char'>\r\n                        <li\r\n                            onClick={() => getCharId(el.id)}\r\n                            onKeyDown={chooseElemFromKeys}\r\n                            id={el.id}\r\n                            tabIndex='0'\r\n                            className={itemClazz}>\r\n                            <img\r\n                                style={imageStyle}\r\n                                src={el.thumbnail}\r\n                                alt={el.name}\r\n                            />\r\n                            <div className='char__name'>{el.title}</div>\r\n                        </li>\r\n                    </CSSTransition>\r\n                );\r\n            })}\r\n        </TransitionGroup>\r\n    );\r\n\r\n    const checkPreloader = loader &&\r\n        charList.length === 0 &&\r\n        !newItemLoading && <Preloader />;\r\n    const checkErrors = error && <Error />;\r\n\r\n    const btnStyles = (\r\n        <button\r\n            disabled={btndisabled}\r\n            onClick={() => getMoreChars(offset)}\r\n            className='button button__main button__long'>\r\n            <div className='inner'>load more</div>\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div className='char__list'>\r\n            {checkPreloader}\r\n            {checkErrors}\r\n            {chars}\r\n            <button\r\n                disabled={btndisabled}\r\n                onClick={() => getMoreChars(offset)}\r\n                className='button button__main button__long'>\r\n                <div className='inner'>load more</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nCharList.propTypes = {\r\n    charList: PropTypes.array,\r\n    updateCharList: PropTypes.func,\r\n    selectedCharId: PropTypes.number,\r\n    updateSelectedChar: PropTypes.func,\r\n};\r\n\r\nexport default CharList;\r\n","import { useMemo } from \"react\";\r\nimport \"./charBasics.scss\";\r\n\r\nconst CharBasics = ({ character }) => {\r\n    const { description, comics, name, thumbnail, wiki, homepage } = character;\r\n\r\n    const getComicsTransform = (arr) => {\r\n        let newArr;\r\n        if (arr.length === 0) {\r\n            newArr = \"Sorry... We dont have comics with this character...\";\r\n        } else if (arr.length > 10) {\r\n            newArr = arr.slice(0, 10);\r\n        } else {\r\n            newArr = arr;\r\n        }\r\n        return newArr;\r\n    };\r\n\r\n    let sliced = getComicsTransform(comics);\r\n\r\n    const charComics =\r\n        typeof sliced === \"string\"\r\n            ? sliced\r\n            : sliced.map((el, i) => {\r\n                  return (\r\n                      <li key={`${el}_${i}`} className='char__comics-item'>\r\n                          {el}\r\n                      </li>\r\n                  );\r\n              });\r\n\r\n    return (\r\n        <>\r\n            <div className='char__basics'>\r\n                <img\r\n                    src={thumbnail}\r\n                    style={\r\n                        thumbnail ===\r\n                        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n                            ? { objectFit: \"fill\" }\r\n                            : { objectFit: \"cover\" }\r\n                    }\r\n                    alt={name}\r\n                />\r\n\r\n                <div>\r\n                    <div className='char__info-name'>{name}</div>\r\n                    <div className='char__btns'>\r\n                        <a href={homepage} className='button button__main'>\r\n                            <div className='inner'>homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className='button button__secondary'>\r\n                            <div className='inner'>Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='char__descr'>{description}</div>\r\n\r\n            <div className='char__comics'>Comics:</div>\r\n            <ul className='char__comics-list'>{charComics}</ul>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharBasics;\r\n","import \"./skeleton.scss\";\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div>\r\n            <p className='char__select'>\r\n                Please select a character to see information\r\n            </p>\r\n            <div className='skeleton'>\r\n                <div className='pulse skeleton__header'>\r\n                    <div className='pulse skeleton__circle'></div>\r\n                    <div className='pulse skeleton__mini'></div>\r\n                </div>\r\n                <div className='pulse skeleton__block'></div>\r\n                <div className='pulse skeleton__block'></div>\r\n                <div className='pulse skeleton__block'></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Skeleton;\r\n","import \"./charInfo.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Preloader from \"../preloader/Preloader\";\r\nimport Error from \"../error/Error\";\r\nimport CharBasics from \"./charBasics/CharBasics\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst CharInfo = ({ selectedCharId }) => {\r\n    const { loader, error, getCharacterByIdData, clearError } =\r\n        useMarvelService();\r\n    const [character, setCharacter] = useState(null);\r\n    const [showInfo, setShowInfo] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getCharacter();\r\n    }, [selectedCharId]);\r\n\r\n    useEffect(() => {\r\n        setShowInfo(true);\r\n    }, []);\r\n\r\n    const updateCharacter = (character) => {\r\n        setCharacter((char) => character);\r\n    };\r\n\r\n    const getCharacter = () => {\r\n        if (!selectedCharId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacterByIdData(selectedCharId).then((data) =>\r\n            updateCharacter(data)\r\n        );\r\n        setShowInfo(true);\r\n    };\r\n\r\n    const preloader = loader && <Preloader />;\r\n    const isError = error && <Error />;\r\n    const skeleton = !character && !error && !loader && <Skeleton />;\r\n    const char = character && !loader && !error && (\r\n        <CharBasics character={character} />\r\n    );\r\n\r\n    const duration = 1400;\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={showInfo}\r\n            mountOnEnter\r\n            timeout={duration}\r\n            classNames='my-info'>\r\n            <div className='char__info'>\r\n                {char}\r\n                {skeleton}\r\n                {preloader}\r\n                {isError}\r\n            </div>\r\n        </CSSTransition>\r\n    );\r\n};\r\n\r\nexport default CharInfo;\r\n","import './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport { useEffect, useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Preloader from '../preloader/Preloader';\r\nimport Error from '../error/Error';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst RandomChar = () => {\r\n    const {error, loader, getRandomCharacter, clearError } = useMarvelService();\r\n\r\n    const [timer, setTimer] = useState(100000);\r\n    const [randomChar, setRandomChar] = useState({})\r\n    \r\n\r\n    useEffect(() => {\r\n        getRandomChar();\r\n\r\n        const timerId = setInterval(() => {\r\n            getRandomChar();\r\n        }, timer);\r\n\r\n        if (!timer) {\r\n            clearInterval(timerId);\r\n        }\r\n        return () => clearInterval(timerId);\r\n    }, [timer]);\r\n\r\n\r\n    const updateRandomChar = (randomChar) => {\r\n        setRandomChar(randomChar);\r\n    }\r\n\r\n    const getRandomChar = () => {\r\n        clearError();\r\n        getRandomCharacter()\r\n        .then(response => updateRandomChar(response))\r\n    }\r\n\r\n\r\n    const { description, title, homepage, wiki, thumbnail } = randomChar;\r\n\r\n    const err = (error) && <Error />;\r\n    const preloader = (loader) && <Preloader />;\r\n    const imageStyle = (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") ? { objectFit: 'fill' } : { objectFit: 'cover' };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n\r\n            {(!loader && !error) ? <div className=\"randomchar__block\">\r\n                <img style={imageStyle} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\r\n                <div className=\"randomchar__info\">\r\n                    <p className=\"randomchar__name\">{title}</p>\r\n                    <p className=\"randomchar__descr\">\r\n                        {description}\r\n                    </p>\r\n                    <div className=\"randomchar__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                :\r\n                <>\r\n                    {err}\r\n                    {preloader}\r\n                </>\r\n            }\r\n\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button\r\n                    onClick={() => {\r\n                        getRandomChar();\r\n                        setTimer('');\r\n                    }}\r\n                    className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\n\r\n// RandomChar.propTypes = {\r\n//     randomChar: PropTypes.object,\r\n//     updateRandomChar: PropTypes.func,\r\n// }\r\n\r\n\r\nexport default RandomChar;","import \"./myForm.scss\";\r\nimport { Formik, Form, Field, useField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Preloader from \"../preloader/Preloader\";\r\n\r\nconst MyInput = ({ label, request, ...props }) => {\r\n    const { loader, error } = useMarvelService();\r\n    const [field, meta] = useField(props);\r\n\r\n    const requiredFieldError =\r\n        meta.error &&\r\n        meta.touched &&\r\n        !loader &&\r\n        JSON.stringify(request) &&\r\n        !error ? (\r\n            <div className='error'>{meta.error}</div>\r\n        ) : null;\r\n\r\n    const noCharError =\r\n        field.value &&\r\n        !loader &&\r\n        !error &&\r\n        !request &&\r\n        meta.touched &&\r\n        JSON.stringify(request) ? (\r\n            <div className='error'>Character not found</div>\r\n        ) : null;\r\n\r\n    const successMessage = request &&\r\n        request.length > 0 &&\r\n        !loader &&\r\n        !error && (\r\n            <div className='input__wrapper'>\r\n                <label className='success'>\r\n                    There is! Visit {request[0].name} page?\r\n                </label>\r\n                <Link\r\n                    to={`/${request[0].id}`}\r\n                    className='button button__secondary'>\r\n                    <div style={{ display: \"block\" }} className='inner'>\r\n                        hero page\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        );\r\n    return (\r\n        <>\r\n            <label id={props.id}>{label}</label>\r\n            <div className='input__wrapper'>\r\n                <input {...field} {...props}></input>\r\n                <button type='submit' className='button button__main'>\r\n                    <div className='inner'>Find</div>\r\n                </button>\r\n            </div>\r\n\r\n            {noCharError}\r\n            {requiredFieldError}\r\n            {successMessage}\r\n        </>\r\n    );\r\n};\r\n\r\nconst MyForm = () => {\r\n    const [request, setRequest] = useState(null);\r\n    const { loader, error, getAllChars } = useMarvelService();\r\n\r\n    const updateChar = (name) => {\r\n        getAllChars(name).then((data) => data.length !== 0 && setRequest(data));\r\n        setRequest(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{\r\n                    name: \"\",\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    name: Yup.string().required(\"Must be required\"),\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    updateChar(values.name);\r\n                    setSubmitting(false);\r\n                }}>\r\n                <Form className='form'>\r\n                    {loader ? (\r\n                        <Preloader />\r\n                    ) : (\r\n                        <MyInput\r\n                            type='text'\r\n                            request={request}\r\n                            name='name'\r\n                            id='name'\r\n                            label='Or find a character by name:'\r\n                            placeholder='Enter the name'\r\n                        />\r\n                    )}\r\n                </Form>\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyForm;\r\n","import { useState } from \"react\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport MyForm from \"../form/MyForm\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedCharId, setSelectedCharId] = useState(null);\r\n\r\n    const updateSelectedChar = (selectedCharId) => {\r\n        setSelectedCharId((selectedId) => selectedCharId);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet='utf-8' name='descrition' />\r\n                <title>Marvel Application</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className='char__content'>\r\n                <ErrorBoundary>\r\n                    <CharList\r\n                        updateSelectedChar={updateSelectedChar}\r\n                        selectedCharId={selectedCharId}\r\n                    />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo selectedCharId={selectedCharId} />\r\n                    </ErrorBoundary>\r\n                    <MyForm></MyForm>\r\n                </div>\r\n            </div>\r\n            <img className='bg-decoration' src={decoration} alt='vision' />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loader, error, request, clearError } = useHttp();\r\n\r\n    const _Apikey = \"apikey=75aef817f3e41428518bd4e3781b08d1\";\r\n    const _Apibase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _baseOffset = 660;\r\n\r\n    // Characters\r\n\r\n    const getAllChars = async (name) => {\r\n        const response = await request(\r\n            `${_Apibase}characters?name=${name}&${_Apikey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformChar);\r\n    };\r\n\r\n    const getAllCharactersData = async (offset = _baseOffset) => {\r\n        const response = await request(\r\n            `${_Apibase}characters?limit=9&offset=${offset}&${_Apikey}`\r\n        );\r\n        return response.data.results.map(_transformChar);\r\n    };\r\n\r\n    const getCharacterByIdData = async (id) => {\r\n        const response = await request(\r\n            `${_Apibase}characters/${id}?${_Apikey}`\r\n        );\r\n        return _transformChar(response.data.results[0]);\r\n    };\r\n\r\n    const getRandomCharacter = async () => {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n        const response = await request(\r\n            `${_Apibase}characters/${id}?${_Apikey}`\r\n        );\r\n        return _transformChar(response.data.results[0]);\r\n    };\r\n\r\n    // Comicses\r\n    const getAllComicsData = (offset = 200) => {\r\n        return request(`${_Apibase}comics?limit=8&offset=${offset}&${_Apikey}`);\r\n    };\r\n    const getComicsByIdData = async (id) => {\r\n        const response = await request(`${_Apibase}comics/${id}?${_Apikey}`);\r\n        return _transformComics(response.data.results[0]);\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            description: _transformText(comics.description),\r\n            id: comics.id,\r\n            thumbnail: `${comics.images[0].path}.${comics.images[0].extension}`,\r\n            price: `${comics.prices[0].price}$`,\r\n            pages: `${comics.pageCount}pages`,\r\n        };\r\n    };\r\n\r\n    const _transformChar = (data) => {\r\n        const comics = data.comics.items.map((el) => el.name);\r\n\r\n        return {\r\n            description: _transformText(data.description),\r\n            id: data.id,\r\n            title: data.name,\r\n            thumbnail: `${data.thumbnail.path}.${data.thumbnail.extension}`,\r\n            homepage: data.urls[0].url,\r\n            wiki: data.urls[1].url,\r\n            comics,\r\n        };\r\n    };\r\n\r\n    const _transformText = (text) => {\r\n        return !text\r\n            ? \"Sorry...We don't have description for this one...\"\r\n            : `${text.slice(0, 230)}...`;\r\n    };\r\n\r\n    return {\r\n        getAllChars,\r\n        getRandomCharacter,\r\n        getAllCharactersData,\r\n        getCharacterByIdData,\r\n        getAllComicsData,\r\n        getComicsByIdData,\r\n        clearError,\r\n        loader,\r\n        error,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","children","Component","className","src","gif","alt","selectedCharId","updateSelectedChar","useMarvelService","loader","getAllCharactersData","useUpdateList","charList","updateCharList","search","setCharList","clearCharList","useState","newItemLoading","setNewItemLoading","btndisabled","setBtndisabled","total","window","localStorage","getItem","offset","setOffset","useEffect","setItem","getAllCharacters","initial","then","charListData","finallyUpdate","updateOffset","getCharId","id","chooseElemFromKeys","e","key","preventDefault","el","target","document","querySelectorAll","selectedElemId","getAttribute","forEach","item","classList","remove","add","blur","getMoreChars","flushSync","chars","TransitionGroup","map","imageStyle","thumbnail","objectFit","itemClazz","CSSTransition","timeout","classNames","onClick","onKeyDown","tabIndex","style","name","title","checkPreloader","length","Preloader","checkErrors","Error","disabled","arr","character","description","comics","wiki","homepage","sliced","slice","charComics","i","href","getCharacterByIdData","clearError","setCharacter","showInfo","setShowInfo","getCharacter","data","char","updateCharacter","preloader","isError","skeleton","in","mountOnEnter","getRandomCharacter","timer","setTimer","randomChar","setRandomChar","getRandomChar","timerId","setInterval","clearInterval","response","updateRandomChar","err","mjolnir","MyInput","label","request","useField","field","meta","requiredFieldError","touched","JSON","stringify","noCharError","value","successMessage","to","display","type","setRequest","getAllChars","initialValues","validationSchema","Yup","required","onSubmit","values","setSubmitting","placeholder","setSelectedCharId","Helmet","charSet","selectedId","decoration","useHttp","_Apikey","_Apibase","results","_transformChar","Math","floor","random","getComicsByIdData","_transformComics","_transformText","images","path","extension","price","prices","pages","pageCount","items","urls","url","text","getAllComicsData"],"sourceRoot":""}