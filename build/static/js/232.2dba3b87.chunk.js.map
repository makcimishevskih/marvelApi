{"version":3,"file":"static/js/232.2dba3b87.chunk.js","mappings":"6KAGMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYC,GAAQ,IAAD,yBACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,KACPC,UAAW,MAJA,CAMlB,CAeA,OAfA,yCAED,SAAkBD,EAAOC,GACrBC,KAAKC,UAAS,SAACJ,GAAD,MAAY,CAAEC,MAAAA,EAAOC,UAAAA,EAArB,GACjB,uBAED,WACI,MAA6BC,KAAKH,MAAnBE,GAAf,EAAQD,MAAR,EAAeC,WACPG,EAAaF,KAAKJ,MAAlBM,SAER,OAAIH,GACO,SAAC,IAAD,IAGJG,CACV,OAtBCP,CAAsBQ,EAAAA,WAyB5B,K,wHCrBA,EAJc,WACV,OAAO,gBAAKC,UAAU,aAAaC,IAAKC,EAAKC,IAAI,SACpD,C,wQCGKC,EAAU,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAAYd,GAAY,YAC9C,GAA0Be,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,MAChB,GAAsBe,EAAAA,EAAAA,IAASjB,GAA/B,eAAOkB,EAAP,KAAcC,EAAd,KAEMC,EACFD,EAAKjB,OACLiB,EAAKE,UACJL,GACDM,KAAKC,UAAUT,KACdZ,GACG,gBAAKM,UAAU,QAAf,SAAwBW,EAAKjB,QAC7B,KAEFsB,EACFN,EAAMO,QACLT,IACAd,IACAY,GACDK,EAAKE,SACLC,KAAKC,UAAUT,IACX,gBAAKN,UAAU,QAAf,iCACA,KAEFkB,EAAiBZ,GACnBA,EAAQa,OAAS,IAChBX,IACAd,IACG,iBAAKM,UAAU,iBAAf,WACI,mBAAOA,UAAU,UAAjB,6BACqBM,EAAQ,GAAGc,KADhC,aAGA,SAAC,KAAD,CACIC,GAAE,WAAMf,EAAQ,GAAGgB,IACnBtB,UAAU,2BAFd,UAGI,gBAAKuB,MAAO,CAAEC,QAAS,SAAWxB,UAAU,QAA5C,4BAMhB,OACI,iCACI,kBAAOsB,GAAI9B,EAAM8B,GAAjB,SAAsBjB,KACtB,iBAAKL,UAAU,iBAAf,WACI,oCAAWU,GAAWlB,KACtB,mBAAQiC,KAAK,SAASzB,UAAU,sBAAhC,UACI,gBAAKA,UAAU,QAAf,uBAIPgB,EACAJ,EACAM,IAGZ,EA2CD,EAzCe,WACX,OAA8BQ,EAAAA,EAAAA,UAAS,MAAvC,eAAOpB,EAAP,KAAgBqB,EAAhB,KACA,GAAuCpB,EAAAA,EAAAA,KAA/BC,EAAR,EAAQA,OAAeoB,GAAvB,EAAgBlC,MAAhB,EAAuBkC,aAOvB,OACI,+BACI,SAAC,KAAD,CACIC,cAAe,CACXT,KAAM,IAEVU,iBAAkBC,EAAAA,GAAW,CACzBX,KAAMW,EAAAA,KAAaC,SAAS,sBAEhCC,SAAU,SAACC,EAAD,GAAgC,IAdlCd,EAcae,EAAoB,EAApBA,cAdbf,EAeOc,EAAOd,KAd9BQ,EAAYR,GAAMgB,MAAK,SAACC,GAAD,OAA0B,IAAhBA,EAAKlB,QAAgBQ,EAAWU,EAA1C,IACvBV,EAAW,MAcCQ,GAAc,EACjB,EAVL,UAWI,SAAC,KAAD,CAAMnC,UAAU,OAAhB,SACKQ,GACG,SAAC8B,EAAA,EAAD,KAEA,SAAClC,EAAD,CACIqB,KAAK,OACLnB,QAASA,EACTc,KAAK,OACLE,GAAG,OACHjB,MAAM,+BACNkC,YAAY,wBAOvC,E,wCCmED,EA/JiB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,mBAClC,GAAgDlC,EAAAA,EAAAA,KAAxCC,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,MAAOgD,EAAvB,EAAuBA,qBACvB,GACEC,EAAAA,EAAAA,KADMC,EAAR,EAAQA,SAA+BC,GAAvC,EAAkBC,OAAlB,EAA0BC,YAA1B,EAAuCF,gBAGvC,GAHA,EAAuDG,eAGXtB,EAAAA,EAAAA,WAAS,IAArD,eAAOuB,EAAP,KAAuBC,EAAvB,KACA,GAAsCxB,EAAAA,EAAAA,WAAS,GAA/C,eAAOyB,EAAP,KAAoBC,EAApB,KACA,GAA0B1B,EAAAA,EAAAA,UAAS,MAAnC,eAAO2B,EAAP,KACA,GADA,MAC4B3B,EAAAA,EAAAA,WACzB4B,OAAOC,aAAaC,QAAQ,WAAa,MAD5C,eAAOC,EAAP,KAAeC,EAAf,MAIAC,EAAAA,EAAAA,YAAU,WACHL,OAAOC,aAAaC,QAAQ,WAC/BF,OAAOC,aAAaK,QAAQ,SAAUH,GAExCI,GAAiB,EAClB,GAAE,KAEHF,EAAAA,EAAAA,YAAU,YACHL,OAAOC,aAAaC,QAAQ,WAAa,KAC5CF,OAAOC,aAAaK,QAAQ,SAAUP,EAAQ,GAGhDC,OAAOC,aAAaK,QAAQ,SAAUH,EAAS,EAChD,GAAE,CAACA,IAEJ,IAAMI,EAAmB,WAAsB,IAArBC,EAAoB,wDAClCZ,IAAVY,GACApB,EAAqBe,GAClBrB,MAAK,SAAC2B,GAAD,OAAkBlB,EAAekB,EAAjC,IACL3B,MAAK,kBAAM4B,GAAN,GACT,EAEKA,EAAgB,WACpBC,IACAb,GAAe,EAChB,EAEKa,EAAe,WACfR,GAAUJ,GAKZK,EAFEL,EAAQI,EAAS,EACAA,GAAUJ,EAAQI,GAI7BA,EAAS,EACpB,EAWKS,EAAY,SAAC5C,GACjBmB,EAAmBnB,EACpB,EAEK6C,EAAqB,SAACC,GAC1B,GAAc,UAAVA,EAAEC,KAA6B,MAAVD,EAAEC,IAAa,CACtCD,EAAEE,iBACF,IAAMC,EAAKH,EAAEI,OACP5B,EAAW6B,SAASC,iBAAiB,eACrCC,GAAkBJ,EAAGK,aAAa,MAExChC,EAASiC,SAAQ,SAACC,GAChBA,EAAKC,UAAUC,OAAO,SACvB,IAEDT,EAAGQ,UAAUE,IAAI,UACjBf,EAAUS,GACVJ,EAAGW,MACJ,CACF,EAYKC,GACJ,SAACC,EAAA,EAAD,CAAiBpF,UAAU,aAA3B,SACG4C,EAASyC,KAAI,SAACd,GACb,IAAMe,EAEJ,wEADAf,EAAGgB,UAEC,CAAEC,UAAW,QACb,CAAEA,UAAW,SACbC,EACJjD,IAAmB+B,EAAGjD,GAAK,oBAAsB,aAEnD,OACE,SAACoE,EAAA,EAAD,CAA2BC,QAdlB,IAcqCC,WAAW,UAAzD,UACE,gBACEC,QAAS,kBAAM3B,EAAUK,EAAGjD,GAAnB,EACTwE,UAAW3B,EACX7C,GAAIiD,EAAGjD,GACPyE,SAAS,IACT/F,UAAWyF,EALb,WAOE,0BACE,gBAAKlE,MAAO+D,EAAYrF,IAAKsE,EAAGgB,UAAWpF,IAAKoE,EAAGnD,UAErD,gBAAKpB,UAAU,aAAf,SAA6BuE,EAAGyB,YAXhBzB,EAAGjD,GAe1B,MAIC2E,EAAiBzF,GAA8B,IAApBoC,EAASzB,SAAiB8B,IACzD,SAACX,EAAA,EAAD,IAEI4D,EAAcxG,IAAS,SAACyG,EAAA,EAAD,IAW7B,OACE,iBAAKnG,UAAU,aAAf,UACGiG,EACAC,EACAf,GACD,mBACEiB,SAAUjD,EACV0C,QAAS,kBA9DM,SAACpC,GAEpBQ,IAEAb,GAAgBD,GAChBU,EAAiBJ,EAClB,CAwDoB4C,CAAa5C,EAAnB,EACTzD,UAAU,mCAHZ,UAKE,gBAAKA,UAAU,QAAf,2BAIP,ECjGD,EA9DmB,SAAC,GAAmB,IAGPsG,EAHVC,EAAgB,EAAhBA,UACVC,EAAyDD,EAAzDC,YAAaC,EAA4CF,EAA5CE,OAAQrF,EAAoCmF,EAApCnF,KAAMmE,EAA8BgB,EAA9BhB,UAAWmB,EAAmBH,EAAnBG,KAAMC,EAAaJ,EAAbI,SAchDC,EAVmB,KAFKN,EAYIG,GAVpBtF,OACK,sDACFmF,EAAInF,OAAS,GACXmF,EAAIO,MAAM,EAAG,IAEbP,EAOXQ,EACgB,kBAAXF,EACDA,EACAA,EAAOvB,KAAI,SAACd,EAAIwC,GACZ,OACI,eAAuB/G,UAAU,oBAAjC,SACKuE,GADL,UAAYA,EAAZ,YAAkBwC,GAIzB,IAEX,OACI,iCACI,iBAAK/G,UAAU,eAAf,WACI,gBACIC,IAAKsF,EACLhE,MAEI,wEADAgE,EAEM,CAAEC,UAAW,QACb,CAAEA,UAAW,SAEvBrF,IAAKiB,KAGT,4BACI,gBAAKpB,UAAU,kBAAf,SAAkCoB,KAClC,iBAAKpB,UAAU,aAAf,WACI,cAAGgH,KAAML,EAAU3G,UAAU,sBAA7B,UACI,gBAAKA,UAAU,QAAf,yBAEJ,cAAGgH,KAAMN,EAAM1G,UAAU,2BAAzB,UACI,gBAAKA,UAAU,QAAf,8BAKhB,gBAAKA,UAAU,cAAf,SAA8BwG,KAE9B,gBAAKxG,UAAU,eAAf,sBACA,eAAIA,UAAU,oBAAd,SAAmC8G,MAG9C,EC1CD,EAnBiB,WACb,OACI,4BACI,cAAG9G,UAAU,eAAb,2DAGA,iBAAKA,UAAU,WAAf,WACI,iBAAKA,UAAU,yBAAf,WACI,gBAAKA,UAAU,4BACf,gBAAKA,UAAU,6BAEnB,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,+BAI9B,EC2CD,EArDiB,SAAC,GAAwB,IAAtBwC,EAAqB,EAArBA,eAClB,GACEjC,EAAAA,EAAAA,KADMC,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,MAAOuH,EAAvB,EAAuBA,qBAAsBC,EAA7C,EAA6CA,WAE7C,GAAkCxF,EAAAA,EAAAA,UAAS,MAA3C,eAAO6E,EAAP,KAAkBY,EAAlB,KACA,GAAgCzF,EAAAA,EAAAA,WAAS,GAAzC,eAAO0F,EAAP,KAAiBC,EAAjB,MAEA1D,EAAAA,EAAAA,YAAU,WACR2D,GACD,GAAE,CAAC9E,KAEJmB,EAAAA,EAAAA,YAAU,WACR0D,GAAY,EACb,GAAE,IAEH,IAIMC,EAAe,WACd9E,IAGL0E,IACAD,EAAqBzE,GAAgBJ,MAAK,SAACC,GAAD,OATpB,SAACkE,GACvBY,GAAa,kBAAMZ,CAAN,GACd,CAOqDgB,CAAgBlF,EAA1B,IAC1CgF,GAAY,GACb,EAEKG,EAAYhH,IAAU,SAAC8B,EAAA,EAAD,IACtBmF,EAAU/H,IAAS,SAACyG,EAAA,EAAD,IACnBuB,GAAYnB,IAAc7G,IAAUc,IAAU,SAAC,EAAD,IAC9CmH,EAAOpB,IAAc/F,IAAWd,IACpC,SAAC,EAAD,CAAY6G,UAAWA,IAKzB,OACE,SAACb,EAAA,EAAD,CACEkC,GAAIR,EACJS,cAAY,EACZlC,QANa,KAObC,WAAW,UAJb,UAME,iBAAK5F,UAAU,aAAf,UACG2H,EACAD,EACAF,EACAC,MAIR,E,sDC6CD,EAhGmB,WACf,OAAyDlH,EAAAA,EAAAA,KAAlDb,EAAP,EAAOA,MAAOc,EAAd,EAAcA,OAAQsH,EAAtB,EAAsBA,mBAAoBZ,EAA1C,EAA0CA,WAE1C,GAA0BxF,EAAAA,EAAAA,UAAS,KAAnC,eAAOqG,EAAP,KAAcC,EAAd,KACA,GAAoCtG,EAAAA,EAAAA,UAAS,CAAC,GAA9C,eAAOuG,EAAP,KAAmBC,EAAnB,MAGAvE,EAAAA,EAAAA,YAAU,WACNwE,IAEA,IAAMC,EAAUC,aAAY,WACxBF,GACH,GAAEJ,GAKH,OAHKA,GACDO,cAAcF,GAEX,kBAAME,cAAcF,EAApB,CACV,GAAE,CAACL,IAGJ,IAIMI,EAAgB,WAClBjB,IACAY,IACC1F,MAAK,SAAAmG,GAAQ,OAPO,SAACN,GACtBC,EAAcD,EACjB,CAKqBO,CAAiBD,EAArB,GACjB,EAGO/B,EAAkDyB,EAAlDzB,YAAaR,EAAqCiC,EAArCjC,MAAOW,EAA8BsB,EAA9BtB,SAAUD,EAAoBuB,EAApBvB,KAAMnB,EAAc0C,EAAd1C,UAEtCkD,EAAO/I,IAAU,SAACyG,EAAA,EAAD,IACjBqB,EAAahH,IAAW,SAAC8B,EAAA,EAAD,IACxBgD,EAA4B,wEAAdC,EAAuF,CAAEC,UAAW,QAAW,CAAEA,UAAW,SAIhJ,OACI,iBAAKxF,UAAU,aAAf,UAEOQ,GAAWd,GAkBV,gCACK+I,EACAjB,MApBc,iBAAKxH,UAAU,oBAAf,WACnB,gBAAKuB,MAAO+D,EAAYrF,IAAKsF,EAAWpF,IAAI,mBAAmBH,UAAU,qBACzE,iBAAKA,UAAU,mBAAf,WACI,cAAGA,UAAU,mBAAb,SAAiCgG,KACjC,cAAGhG,UAAU,oBAAb,SACKwG,KAEL,iBAAKxG,UAAU,mBAAf,WACI,cAAGgH,KAAML,EAAU3G,UAAU,sBAA7B,UACI,gBAAKA,UAAU,QAAf,yBAEJ,cAAGgH,KAAMN,EAAM1G,UAAU,2BAAzB,UACI,gBAAKA,UAAU,QAAf,8BAYhB,iBAAKA,UAAU,qBAAf,WACI,eAAGA,UAAU,oBAAb,yCAC+B,kBAD/B,6CAIA,cAAGA,UAAU,oBAAb,oCAGA,mBACI6F,QAAS,WACLsC,IACAH,EAAS,GACZ,EACDhI,UAAU,sBALd,UAMI,gBAAKA,UAAU,QAAf,uBAEJ,gBAAKC,IAAKyI,EAASvI,IAAI,UAAUH,UAAU,gCAI1D,EClDD,EAnCiB,WACf,OAA4C0B,EAAAA,EAAAA,UAAS,MAArD,eAAOc,EAAP,KAAuBmG,EAAvB,KAMA,OACE,iCACE,UAACC,EAAA,EAAD,YACE,iBAAMC,QAAQ,QAAQzH,KAAK,gBAC3B,sDAEF,SAAC7B,EAAA,EAAD,WACE,SAAC,EAAD,OAEF,iBAAKS,UAAU,gBAAf,WACE,SAACT,EAAA,EAAD,WACE,SAAC,EAAD,CACEkD,mBAhBiB,SAACD,GAC1BmG,GAAkB,kBAAMnG,CAAN,GACnB,EAeSA,eAAgBA,OAGpB,iBAAKxC,UAAU,mBAAf,WACE,SAACT,EAAA,EAAD,WACE,SAAC,EAAD,CAAUiD,eAAgBA,OAE5B,SAAC,EAAD,WAGJ,gBAAKxC,UAAU,gBAAgBC,IAAK6I,EAAY3I,IAAI,aAGzD,C,yDCmDD,IA7FyB,WACrB,OAA+C4I,EAAAA,EAAAA,KAAvCvI,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,MAAOY,EAAvB,EAAuBA,QAAS4G,EAAhC,EAAgCA,WAE1B8B,EAAU,0CACVC,EAAW,4CAKXrH,EAAW,yCAAG,WAAOR,GAAP,4FACOd,EAAQ,GAAD,OACvB2I,EADuB,2BACI7H,EADJ,YACY4H,IAF1B,cACVT,EADU,yBAKTA,EAASlG,KAAK6G,QAAQ7D,IAAI8D,IALjB,2CAAH,sDAQXzG,EAAoB,yCAAG,8GAAOe,EAAP,+BAZT,IAYS,SACFnD,EAAQ,GAAD,OACvB2I,EADuB,qCACcxF,EADd,YACwBuF,IAF7B,cACnBT,EADmB,yBAIlBA,EAASlG,KAAK6G,QAAQ7D,IAAI8D,IAJR,2CAAH,qDAOpBlC,EAAoB,yCAAG,WAAO3F,GAAP,4FACFhB,EAAQ,GAAD,OACvB2I,EADuB,sBACD3H,EADC,YACK0H,IAFV,cACnBT,EADmB,yBAIlBY,EAAeZ,EAASlG,KAAK6G,QAAQ,KAJnB,2CAAH,sDAOpBpB,EAAkB,yCAAG,kGACjBxG,EAAK8H,KAAKC,MAAM,IAAAD,KAAKE,SAAiC,QADrC,SAGAhJ,EAAQ,GAAD,OACvB2I,EADuB,sBACD3H,EADC,YACK0H,IAJZ,cAGjBT,EAHiB,yBAMhBY,EAAeZ,EAASlG,KAAK6G,QAAQ,KANrB,2CAAH,qDAalBK,EAAiB,yCAAG,WAAOjI,GAAP,4FACChB,EAAQ,GAAD,OAAI2I,EAAJ,kBAAsB3H,EAAtB,YAA4B0H,IADpC,cAChBT,EADgB,yBAEfiB,EAAiBjB,EAASlG,KAAK6G,QAAQ,KAFxB,2CAAH,sDAKjBM,EAAmB,SAAC/C,GACtB,MAAO,CACHT,MAAOS,EAAOT,MACdQ,YAAaiD,EAAehD,EAAOD,aACnClF,GAAImF,EAAOnF,GACXiE,UAAU,GAAD,OAAKkB,EAAOiD,OAAO,GAAGC,KAAtB,YAA8BlD,EAAOiD,OAAO,GAAGE,WACxDC,MAAM,GAAD,OAAKpD,EAAOqD,OAAO,GAAGD,MAAtB,KACLE,MAAM,GAAD,OAAKtD,EAAOuD,UAAZ,SAEZ,EAEKb,EAAiB,SAAC9G,GACpB,IAAMoE,EAASpE,EAAKoE,OAAOwD,MAAM5E,KAAI,SAACd,GAAD,OAAQA,EAAGnD,IAAX,IAErC,MAAO,CACHoF,YAAaiD,EAAepH,EAAKmE,aACjClF,GAAIe,EAAKf,GACT0E,MAAO3D,EAAKjB,KACZmE,UAAU,GAAD,OAAKlD,EAAKkD,UAAUoE,KAApB,YAA4BtH,EAAKkD,UAAUqE,WACpDjD,SAAUtE,EAAK6H,KAAK,GAAGC,IACvBzD,KAAMrE,EAAK6H,KAAK,GAAGC,IACnB1D,OAAAA,EAEP,EAEKgD,EAAiB,SAACW,GACpB,OAAQA,EAAD,UAEEA,EAAKvD,MAAM,EAAG,KAFhB,OACD,mDAET,EAED,MAAO,CACHjF,YAAAA,EACAkG,mBAAAA,EACApF,qBAAAA,EACAuE,qBAAAA,EACAoD,iBA5CqB,WAAmB,IAAlB5G,EAAiB,uDAAR,IAC/B,OAAOnD,EAAQ,GAAD,OAAI2I,EAAJ,iCAAqCxF,EAArC,YAA+CuF,GAChE,EA2CGO,kBAAAA,EACArC,WAAAA,EACA1G,OAAAA,EACAd,MAAAA,EAEP,C","sources":["components/errorBoundary/ErrorBoundary.jsx","components/error/Error.jsx","components/form/MyForm.jsx","components/charList/CharList.jsx","components/charInfo/charBasics/CharBasics.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/randomChar/RandomChar.jsx","components/pages/MainPage.jsx","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport Error from \"../error/Error\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null,\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState((state) => ({ error, errorInfo }));\r\n    }\r\n\r\n    render() {\r\n        const { error, errorInfo } = this.state;\r\n        const { children } = this.props;\r\n\r\n        if (errorInfo) {\r\n            return <Error />;\r\n        }\r\n\r\n        return children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import gif from \"../../resources/error.gif\";\r\nimport \"./error.scss\";\r\n\r\nconst Error = () => {\r\n    return <img className='error__img' src={gif} alt='Error' />;\r\n};\r\n\r\nexport default Error;\r\n","import \"./myForm.scss\";\r\nimport { Formik, Form, Field, useField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Preloader from \"../preloader/Preloader\";\r\n\r\nconst MyInput = ({ label, request, ...props }) => {\r\n    const { loader, error } = useMarvelService();\r\n    const [field, meta] = useField(props);\r\n\r\n    const requiredFieldError =\r\n        meta.error &&\r\n        meta.touched &&\r\n        !loader &&\r\n        JSON.stringify(request) &&\r\n        !error ? (\r\n            <div className='error'>{meta.error}</div>\r\n        ) : null;\r\n\r\n    const noCharError =\r\n        field.value &&\r\n        !loader &&\r\n        !error &&\r\n        !request &&\r\n        meta.touched &&\r\n        JSON.stringify(request) ? (\r\n            <div className='error'>Character not found</div>\r\n        ) : null;\r\n\r\n    const successMessage = request &&\r\n        request.length > 0 &&\r\n        !loader &&\r\n        !error && (\r\n            <div className='input__wrapper'>\r\n                <label className='success'>\r\n                    There is! Visit {request[0].name} page?\r\n                </label>\r\n                <Link\r\n                    to={`/${request[0].id}`}\r\n                    className='button button__secondary'>\r\n                    <div style={{ display: \"block\" }} className='inner'>\r\n                        hero page\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        );\r\n    return (\r\n        <>\r\n            <label id={props.id}>{label}</label>\r\n            <div className='input__wrapper'>\r\n                <input {...field} {...props}></input>\r\n                <button type='submit' className='button button__main'>\r\n                    <div className='inner'>Find</div>\r\n                </button>\r\n            </div>\r\n\r\n            {noCharError}\r\n            {requiredFieldError}\r\n            {successMessage}\r\n        </>\r\n    );\r\n};\r\n\r\nconst MyForm = () => {\r\n    const [request, setRequest] = useState(null);\r\n    const { loader, error, getAllChars } = useMarvelService();\r\n\r\n    const updateChar = (name) => {\r\n        getAllChars(name).then((data) => data.length !== 0 && setRequest(data));\r\n        setRequest(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{\r\n                    name: \"\",\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    name: Yup.string().required(\"Must be required\"),\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    updateChar(values.name);\r\n                    setSubmitting(false);\r\n                }}>\r\n                <Form className='form'>\r\n                    {loader ? (\r\n                        <Preloader />\r\n                    ) : (\r\n                        <MyInput\r\n                            type='text'\r\n                            request={request}\r\n                            name='name'\r\n                            id='name'\r\n                            label='Or find a character by name:'\r\n                            placeholder='Enter the name'\r\n                        />\r\n                    )}\r\n                </Form>\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyForm;\r\n","import \"./charList.scss\";\r\n// import { flushSync } from \"react-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useUpdateList } from \"../../hooks/http.hook\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport Preloader from \"../preloader/Preloader\";\r\nimport Error from \"../error/Error\";\r\n\r\nconst CharList = ({ selectedCharId, updateSelectedChar }) => {\r\n  const { loader, error, getAllCharactersData } = useMarvelService();\r\n  const { charList, search, setCharList, updateCharList, clearCharList } =\r\n    useUpdateList();\r\n\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [btndisabled, setBtndisabled] = useState(true);\r\n  const [total, setTotal] = useState(1559);\r\n  const [offset, setOffset] = useState(\r\n    +window.localStorage.getItem(\"offset\") || 660\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!window.localStorage.getItem(\"offset\")) {\r\n      window.localStorage.setItem(\"offset\", offset);\r\n    }\r\n    getAllCharacters(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (+window.localStorage.getItem(\"offset\") >= 1549) {\r\n      window.localStorage.setItem(\"offset\", total - 1);\r\n      return;\r\n    }\r\n    window.localStorage.setItem(\"offset\", offset - 9);\r\n  }, [offset]);\r\n\r\n  const getAllCharacters = (initial = false) => {\r\n    initial ? setNewItemLoading(true) : setNewItemLoading(false);\r\n    getAllCharactersData(offset)\r\n      .then((charListData) => updateCharList(charListData))\r\n      .then(() => finallyUpdate());\r\n  };\r\n\r\n  const finallyUpdate = () => {\r\n    updateOffset();\r\n    setBtndisabled(false);\r\n  };\r\n\r\n  const updateOffset = () => {\r\n    if (offset >= total) {\r\n      return;\r\n    }\r\n    if (total - offset < 9) {\r\n      const difference = offset + (total - offset);\r\n      setOffset(difference);\r\n      return;\r\n    }\r\n    setOffset(offset + 9);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     if (offset === total) { return;}\r\n  //     window.addEventListener('scroll', handlerOnScroll);\r\n  //     return () => { window.removeEventListener('scroll', handlerOnScroll);} }, [offset])\r\n\r\n  // const handlerOnScroll = () => {\r\n  //     if (document.documentElement.scrollTop === document.documentElement.scrollHeight - document.documentElement.clientHeight && document.documentElement.scrollTop !== 0) {\r\n  //         getAllCharacters();}}\r\n\r\n  const getCharId = (id) => {\r\n    updateSelectedChar(id);\r\n  };\r\n\r\n  const chooseElemFromKeys = (e) => {\r\n    if (e.key === \"Enter\" || e.key === \" \") {\r\n      e.preventDefault();\r\n      const el = e.target;\r\n      const charList = document.querySelectorAll(\".char__item\");\r\n      const selectedElemId = +el.getAttribute(\"id\");\r\n\r\n      charList.forEach((item) => {\r\n        item.classList.remove(\"active\");\r\n      });\r\n\r\n      el.classList.add(\"active\");\r\n      getCharId(selectedElemId);\r\n      el.blur();\r\n    }\r\n  };\r\n\r\n  const getMoreChars = (offset) => {\r\n    // flushSync(() =>\r\n    updateOffset();\r\n    // );\r\n    setBtndisabled(!btndisabled);\r\n    getAllCharacters(offset);\r\n  };\r\n\r\n  const duration = 800;\r\n\r\n  const chars = (\r\n    <TransitionGroup className=\"char__flex\">\r\n      {charList.map((el) => {\r\n        const imageStyle =\r\n          el.thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n            ? { objectFit: \"fill\" }\r\n            : { objectFit: \"cover\" };\r\n        const itemClazz =\r\n          selectedCharId === el.id ? \"char__item active\" : \"char__item\";\r\n\r\n        return (\r\n          <CSSTransition key={el.id} timeout={duration} classNames=\"my-char\">\r\n            <li\r\n              onClick={() => getCharId(el.id)}\r\n              onKeyDown={chooseElemFromKeys}\r\n              id={el.id}\r\n              tabIndex=\"0\"\r\n              className={itemClazz}\r\n            >\r\n              <div>\r\n                <img style={imageStyle} src={el.thumbnail} alt={el.name} />\r\n              </div>\r\n              <div className=\"char__name\">{el.title}</div>\r\n            </li>\r\n          </CSSTransition>\r\n        );\r\n      })}\r\n    </TransitionGroup>\r\n  );\r\n\r\n  const checkPreloader = loader && charList.length === 0 && !newItemLoading && (\r\n    <Preloader />\r\n  );\r\n  const checkErrors = error && <Error />;\r\n\r\n  // const btnStyles = (\r\n  //     <button\r\n  //         disabled={btndisabled}\r\n  //         onClick={() => getMoreChars(offset)}\r\n  //         className='button button__main button__long'>\r\n  //         <div className='inner'>load more</div>\r\n  //     </button>\r\n  // );\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {checkPreloader}\r\n      {checkErrors}\r\n      {chars}\r\n      <button\r\n        disabled={btndisabled}\r\n        onClick={() => getMoreChars(offset)}\r\n        className=\"button button__main button__long\"\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  charList: PropTypes.array,\r\n  updateCharList: PropTypes.func,\r\n  selectedCharId: PropTypes.number,\r\n  updateSelectedChar: PropTypes.func,\r\n};\r\n\r\nexport default CharList;\r\n","import { useMemo } from \"react\";\r\nimport \"./charBasics.scss\";\r\n\r\nconst CharBasics = ({ character }) => {\r\n    const { description, comics, name, thumbnail, wiki, homepage } = character;\r\n\r\n    const getComicsTransform = (arr) => {\r\n        let newArr;\r\n        if (arr.length === 0) {\r\n            newArr = \"Sorry... We dont have comics with this character...\";\r\n        } else if (arr.length > 10) {\r\n            newArr = arr.slice(0, 10);\r\n        } else {\r\n            newArr = arr;\r\n        }\r\n        return newArr;\r\n    };\r\n\r\n    let sliced = getComicsTransform(comics);\r\n\r\n    const charComics =\r\n        typeof sliced === \"string\"\r\n            ? sliced\r\n            : sliced.map((el, i) => {\r\n                  return (\r\n                      <li key={`${el}_${i}`} className='char__comics-item'>\r\n                          {el}\r\n                      </li>\r\n                  );\r\n              });\r\n\r\n    return (\r\n        <>\r\n            <div className='char__basics'>\r\n                <img\r\n                    src={thumbnail}\r\n                    style={\r\n                        thumbnail ===\r\n                        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n                            ? { objectFit: \"fill\" }\r\n                            : { objectFit: \"cover\" }\r\n                    }\r\n                    alt={name}\r\n                />\r\n\r\n                <div>\r\n                    <div className='char__info-name'>{name}</div>\r\n                    <div className='char__btns'>\r\n                        <a href={homepage} className='button button__main'>\r\n                            <div className='inner'>homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className='button button__secondary'>\r\n                            <div className='inner'>Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='char__descr'>{description}</div>\r\n\r\n            <div className='char__comics'>Comics:</div>\r\n            <ul className='char__comics-list'>{charComics}</ul>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharBasics;\r\n","import \"./skeleton.scss\";\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div>\r\n            <p className='char__select'>\r\n                Please select a character to see information\r\n            </p>\r\n            <div className='skeleton'>\r\n                <div className='pulse skeleton__header'>\r\n                    <div className='pulse skeleton__circle'></div>\r\n                    <div className='pulse skeleton__mini'></div>\r\n                </div>\r\n                <div className='pulse skeleton__block'></div>\r\n                <div className='pulse skeleton__block'></div>\r\n                <div className='pulse skeleton__block'></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Skeleton;\r\n","import \"./charInfo.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Preloader from \"../preloader/Preloader\";\r\nimport Error from \"../error/Error\";\r\nimport CharBasics from \"./charBasics/CharBasics\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst CharInfo = ({ selectedCharId }) => {\r\n  const { loader, error, getCharacterByIdData, clearError } =\r\n    useMarvelService();\r\n  const [character, setCharacter] = useState(null);\r\n  const [showInfo, setShowInfo] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCharacter();\r\n  }, [selectedCharId]);\r\n\r\n  useEffect(() => {\r\n    setShowInfo(true);\r\n  }, []);\r\n\r\n  const updateCharacter = (character) => {\r\n    setCharacter(() => character);\r\n  };\r\n\r\n  const getCharacter = () => {\r\n    if (!selectedCharId) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getCharacterByIdData(selectedCharId).then((data) => updateCharacter(data));\r\n    setShowInfo(true);\r\n  };\r\n\r\n  const preloader = loader && <Preloader />;\r\n  const isError = error && <Error />;\r\n  const skeleton = !character && !error && !loader && <Skeleton />;\r\n  const char = character && !loader && !error && (\r\n    <CharBasics character={character} />\r\n  );\r\n\r\n  const duration = 1400;\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={showInfo}\r\n      mountOnEnter\r\n      timeout={duration}\r\n      classNames=\"my-info\"\r\n    >\r\n      <div className=\"char__info\">\r\n        {char}\r\n        {skeleton}\r\n        {preloader}\r\n        {isError}\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default CharInfo;\r\n","import './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport { useEffect, useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Preloader from '../preloader/Preloader';\r\nimport Error from '../error/Error';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst RandomChar = () => {\r\n    const {error, loader, getRandomCharacter, clearError } = useMarvelService();\r\n\r\n    const [timer, setTimer] = useState(100000);\r\n    const [randomChar, setRandomChar] = useState({})\r\n    \r\n\r\n    useEffect(() => {\r\n        getRandomChar();\r\n\r\n        const timerId = setInterval(() => {\r\n            getRandomChar();\r\n        }, timer);\r\n\r\n        if (!timer) {\r\n            clearInterval(timerId);\r\n        }\r\n        return () => clearInterval(timerId);\r\n    }, [timer]);\r\n\r\n\r\n    const updateRandomChar = (randomChar) => {\r\n        setRandomChar(randomChar);\r\n    }\r\n\r\n    const getRandomChar = () => {\r\n        clearError();\r\n        getRandomCharacter()\r\n        .then(response => updateRandomChar(response))\r\n    }\r\n\r\n\r\n    const { description, title, homepage, wiki, thumbnail } = randomChar;\r\n\r\n    const err = (error) && <Error />;\r\n    const preloader = (loader) && <Preloader />;\r\n    const imageStyle = (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") ? { objectFit: 'fill' } : { objectFit: 'cover' };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n\r\n            {(!loader && !error) ? <div className=\"randomchar__block\">\r\n                <img style={imageStyle} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\r\n                <div className=\"randomchar__info\">\r\n                    <p className=\"randomchar__name\">{title}</p>\r\n                    <p className=\"randomchar__descr\">\r\n                        {description}\r\n                    </p>\r\n                    <div className=\"randomchar__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                :\r\n                <>\r\n                    {err}\r\n                    {preloader}\r\n                </>\r\n            }\r\n\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button\r\n                    onClick={() => {\r\n                        getRandomChar();\r\n                        setTimer('');\r\n                    }}\r\n                    className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\n\r\n// RandomChar.propTypes = {\r\n//     randomChar: PropTypes.object,\r\n//     updateRandomChar: PropTypes.func,\r\n// }\r\n\r\n\r\nexport default RandomChar;","import decoration from \"../../resources/img/vision.png\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport MyForm from \"../form/MyForm\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedCharId, setSelectedCharId] = useState(null);\r\n\r\n  const updateSelectedChar = (selectedCharId) => {\r\n    setSelectedCharId(() => selectedCharId);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" name=\"descrition\" />\r\n        <title>Marvel Application</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList\r\n            updateSelectedChar={updateSelectedChar}\r\n            selectedCharId={selectedCharId}\r\n          />\r\n        </ErrorBoundary>\r\n        <div className=\"char__info-block\">\r\n          <ErrorBoundary>\r\n            <CharInfo selectedCharId={selectedCharId} />\r\n          </ErrorBoundary>\r\n          <MyForm></MyForm>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loader, error, request, clearError } = useHttp();\r\n\r\n    const _Apikey = \"apikey=75aef817f3e41428518bd4e3781b08d1\";\r\n    const _Apibase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _baseOffset = 660;\r\n\r\n    // Characters\r\n\r\n    const getAllChars = async (name) => {\r\n        const response = await request(\r\n            `${_Apibase}characters?name=${name}&${_Apikey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformChar);\r\n    };\r\n\r\n    const getAllCharactersData = async (offset = _baseOffset) => {\r\n        const response = await request(\r\n            `${_Apibase}characters?limit=9&offset=${offset}&${_Apikey}`\r\n        );\r\n        return response.data.results.map(_transformChar);\r\n    };\r\n\r\n    const getCharacterByIdData = async (id) => {\r\n        const response = await request(\r\n            `${_Apibase}characters/${id}?${_Apikey}`\r\n        );\r\n        return _transformChar(response.data.results[0]);\r\n    };\r\n\r\n    const getRandomCharacter = async () => {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n        const response = await request(\r\n            `${_Apibase}characters/${id}?${_Apikey}`\r\n        );\r\n        return _transformChar(response.data.results[0]);\r\n    };\r\n\r\n    // Comicses\r\n    const getAllComicsData = (offset = 200) => {\r\n        return request(`${_Apibase}comics?limit=8&offset=${offset}&${_Apikey}`);\r\n    };\r\n    const getComicsByIdData = async (id) => {\r\n        const response = await request(`${_Apibase}comics/${id}?${_Apikey}`);\r\n        return _transformComics(response.data.results[0]);\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            description: _transformText(comics.description),\r\n            id: comics.id,\r\n            thumbnail: `${comics.images[0].path}.${comics.images[0].extension}`,\r\n            price: `${comics.prices[0].price}$`,\r\n            pages: `${comics.pageCount}pages`,\r\n        };\r\n    };\r\n\r\n    const _transformChar = (data) => {\r\n        const comics = data.comics.items.map((el) => el.name);\r\n\r\n        return {\r\n            description: _transformText(data.description),\r\n            id: data.id,\r\n            title: data.name,\r\n            thumbnail: `${data.thumbnail.path}.${data.thumbnail.extension}`,\r\n            homepage: data.urls[0].url,\r\n            wiki: data.urls[1].url,\r\n            comics,\r\n        };\r\n    };\r\n\r\n    const _transformText = (text) => {\r\n        return !text\r\n            ? \"Sorry...We don't have description for this one...\"\r\n            : `${text.slice(0, 230)}...`;\r\n    };\r\n\r\n    return {\r\n        getAllChars,\r\n        getRandomCharacter,\r\n        getAllCharactersData,\r\n        getCharacterByIdData,\r\n        getAllComicsData,\r\n        getComicsByIdData,\r\n        clearError,\r\n        loader,\r\n        error,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","children","Component","className","src","gif","alt","MyInput","label","request","useMarvelService","loader","useField","field","meta","requiredFieldError","touched","JSON","stringify","noCharError","value","successMessage","length","name","to","id","style","display","type","useState","setRequest","getAllChars","initialValues","validationSchema","Yup","required","onSubmit","values","setSubmitting","then","data","Preloader","placeholder","selectedCharId","updateSelectedChar","getAllCharactersData","useUpdateList","charList","updateCharList","search","setCharList","clearCharList","newItemLoading","setNewItemLoading","btndisabled","setBtndisabled","total","window","localStorage","getItem","offset","setOffset","useEffect","setItem","getAllCharacters","initial","charListData","finallyUpdate","updateOffset","getCharId","chooseElemFromKeys","e","key","preventDefault","el","target","document","querySelectorAll","selectedElemId","getAttribute","forEach","item","classList","remove","add","blur","chars","TransitionGroup","map","imageStyle","thumbnail","objectFit","itemClazz","CSSTransition","timeout","classNames","onClick","onKeyDown","tabIndex","title","checkPreloader","checkErrors","Error","disabled","getMoreChars","arr","character","description","comics","wiki","homepage","sliced","slice","charComics","i","href","getCharacterByIdData","clearError","setCharacter","showInfo","setShowInfo","getCharacter","updateCharacter","preloader","isError","skeleton","char","in","mountOnEnter","getRandomCharacter","timer","setTimer","randomChar","setRandomChar","getRandomChar","timerId","setInterval","clearInterval","response","updateRandomChar","err","mjolnir","setSelectedCharId","Helmet","charSet","decoration","useHttp","_Apikey","_Apibase","results","_transformChar","Math","floor","random","getComicsByIdData","_transformComics","_transformText","images","path","extension","price","prices","pages","pageCount","items","urls","url","text","getAllComicsData"],"sourceRoot":""}